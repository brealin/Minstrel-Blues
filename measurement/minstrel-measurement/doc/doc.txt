dependencies
============

kernel
------
ATH9K_DEBUGFS
   Atheros ath9k debugging 
   CONFIG_ATH9K_DEBUGFS
   Prompt: Atheros ath9k debugging
     Location:
       -> Device Drivers
         -> Network device support (NETDEVICES [=y])
           -> Wireless LAN (WLAN [=y])
             -> Atheros/Qualcomm devices (WLAN_VENDOR_ATH [=y])
               -> Atheros 802.11n wireless cards support (ATH9K [=y])
system
------
We use informations from kernel debug filesystem. To run some test cases as
user access to the debugfs is needed which is allowed root user by default
only. To run these test cases as user remount the debugfs with mode=1777.

build
-----
lua 5.1: measurement runtime [+openwrt] ( lua 5.3 not available on LEDE,
											hard masked on gentoo)
lua-posix 33.2.1: process id [+openwrt] ( >33.2.1 lacks bit32 native in lua 5.3)
lua-ex: spawn process [+openwrt] (microsleep, spawn [broken on all platforms
                                              due to memory corruption] )
        sleep with microseconds support
lua-argparse: command line parser / interface [+openwrt]
lua-rpc: remote procedure calls for lua [+openwrt] (alternative: nixio)
pcap-lua: parse pcap files [+openwrt]
LuaBitOp [-openwrt]
pprint.lua: lua pretty printing [+openwrt]
lua-system: sleep with nanosecond support [-openwrt]
lpc: run process with pid, stdin, stdout and wait with exit_code support

not used but helpful
--------------------
nixio supports:
	- rpc, 
	- rpc.uci,
	- net.ping,
	- wifi.iwinfo (but not more i.e., iwlink)
	- routes, iptables, ifconfig
	- process pid, signal

runtime
-------
lua
tcpdump: dump monitor interface packets
iperf (NOT iperf3): generation of payload for measurement
cputime: cpu load
ping: reachablity
ssh/ssh-keygen: start/stop nodes, with authorized keys
dropbear-ssh,dropbearkeygen:
kill: stop processes
iw, ifconfig: add monitor
tee: split tcpdump output
ssh-add, ssh-agent: local ssh authorizer for remote command execution (~/.ssh# ssh-add id_rsa)
dropbear: 
bind-dig: optain ip addresses
hostname: query hostname ( testing only )
free: monitor memory
dig: resolve hostnames
uci, wifi: wifi configuration (openwrt only)
coreutils date: sync time
busybox date: sync time on openwrt

logging
=======
- single lua rpc node

control
=======
- lua rpc nodes via control network interface
- transfer stats
- needs a running name server or a resolv.conf pointing to

documentation
=============
LDoc, LuaDoc

setup
=====
- add mac addresses of all stations to dhcp (setup should get same ip adresses)
- WAN firewall zone should accept input for ssh connections via WAN
-- ISSUE: when a router is configured as the only dhcp server all clients will not get a ipv4 address from other dhcp server

stations
--------
- no routing at all
- no filtering
- each the wifi and the control interface belongs to different networks
- add route to wifi network on gw

access points
-------------
- no bridged routing between wifi and control interfaces
- each the wifi and the control interface belongs to different networks
- add route to wifi network on gw

utils
=====

ssh
---
note: when using ssh control master then sometimes "channel 5: bad ext data"
occurs. a workaround is to disable ssh control master

generate keys:
    dropbearkey -t rsa -f /etc/dropbear/id_rsa
auth-file:
    /etc/dropbear/authorized_keys
print pub key:
    dropbearkey -y -f /etc/dropbear/id_rsa  | grep ssh-rsa
connect:
    ssh -i /etc/dropbear/id_rsa lede-sta
alternatively use hostkey from:
    /etc/dropbear/dropbear_rsa_host_key
 which doesn't have a password set
 connect:
        ssh -i /etc/dropbear/dropbear_rsa_host_key lede-sta
to connect to machines other than openwrt ed25519 keys are required which are
not supported by openwrts dropbear installation

alternatively use openssh with passphrase and ssh-agent:
    ssh-keygen -t rsa -f id_rsa -C noname
    ssh-keygen -t ed25519 -f id_ed25519 -C noname
move keys to permanent location
    mv id_rsa* lede-sta:/etc/dropbear
put id_rsa.pub into /etc/dropbear/authorized_keys on all other hosts
or use ssh-copy-id (which isn't available in openssh-client-utils)
    ssh-copy-id root@192.168.1.1
add to /etc/profile (for ash):
    if [ -z "$SSH_AUTH_SOCK" ] ; then
        eval `ssh-agent -s`
    fi
this will start a new ssh-agent on every new shell
alternatively add keychain to /etc/profile to keep ssh-agent running after
logout and avoid restarting after new or second login (which is not available
in openssh-client-utils)
    eval `keychain --eval id_rsa`
when ssh-agent is running there will be a line like "Agent pid 1337" after login
run ssh-add and enter passphrase
    ssh-add
befor starting measurements
config:
    Network->SSH->
        * openssh-client (ssh) overwrites dropbear ssh client
        * openssh-client-utils (ssh-add ssh-agent ssh-keyscan ssh-keysign)
        * openssh-keygen (ssh-keygen)
    (optional) rssh restricted shell for use with OpenSSH
ctrl depends on:
+ openssh-keygen
+ openssh-client-utils which selects openssh-utils
ap, sta depends on:
+ openssh-keygen or dropbearkey
to change roles of all stations install all three packages on all hosts

for a permanent storage of files
/etc/dropbear/{authorized_keys,dropbear_rsa_host_key,id_rsa} place then in 'files'
folder of the lede build environment

ensure file permissions are set properly, i.e. 600

Curve25519 support DROPBEAR_CURVE25519=y
Elliptic curve cryptograph DROPBEAR_ECC=n
Pututline support DROPBEAR_PUTUTLINE=n
Utmp support DROPBEAR_UTMP=n

tcpdump
-------

iperf
-----

cpusage
-------

cpusage is a small program written in C to print the CPU stats periodically. It is bundled within the LEDE old-packages feed.
Since cpusage seems a bit buggy ad we don't need a summary at termination it is wrapped by a simple shell loop that executes
cpusage in single line mode by parameterizing with '-s'. Otherwise cpusages output will disappear from piped stdout. Sometimes
a single line is readable from stdout only and sometimes no output is readable at all. Redirecting the output to a file doesn't
work with lua io.read. Because other programs like 'date' doesn't show this behaviour we choose to limit cpusage to single line output.
